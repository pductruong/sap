
STM32F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000028c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000420  08000420  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000420  08000420  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000420  08000420  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000420  08000420  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000420  08000420  00001420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000424  08000424  00001424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000428  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800042c  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800042c  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000126b  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004e8  00000000  00000000  0000329f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  00003788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000144  00000000  00000000  00003958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013b26  00000000  00000000  00003a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002103  00000000  00000000  000175c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007df88  00000000  00000000  000196c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009764d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000056c  00000000  00000000  00097690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00097bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000408 	.word	0x08000408

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000408 	.word	0x08000408

080001d4 <main>:

void SystemClock_Config(void);
void GPIO_Init(void);

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
    SystemClock_Config();
 80001da:	f000 f847 	bl	800026c <SystemClock_Config>
    GPIO_Init();
 80001de:	f000 f815 	bl	800020c <GPIO_Init>

    while (1)
    {
        // Toggle PA0 by modifying the GPIO output data register (ODR)
        GPIOA->ODR ^= GPIO_ODR_OD0;  // XOR toggle for pin 0 (PA0)
 80001e2:	4b08      	ldr	r3, [pc, #32]	@ (8000204 <main+0x30>)
 80001e4:	695b      	ldr	r3, [r3, #20]
 80001e6:	4a07      	ldr	r2, [pc, #28]	@ (8000204 <main+0x30>)
 80001e8:	f083 0301 	eor.w	r3, r3, #1
 80001ec:	6153      	str	r3, [r2, #20]

        // Simple delay (not precise)
        for (volatile int i = 0; i < 1000000; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <main+0x26>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a02      	ldr	r2, [pc, #8]	@ (8000208 <main+0x34>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	ddf8      	ble.n	80001f4 <main+0x20>
        GPIOA->ODR ^= GPIO_ODR_OD0;  // XOR toggle for pin 0 (PA0)
 8000202:	e7ee      	b.n	80001e2 <main+0xe>
 8000204:	40020000 	.word	0x40020000
 8000208:	000f423f 	.word	0x000f423f

0800020c <GPIO_Init>:
    }
}

void GPIO_Init(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
    // Enable GPIOA clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000210:	4b14      	ldr	r3, [pc, #80]	@ (8000264 <GPIO_Init+0x58>)
 8000212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000214:	4a13      	ldr	r2, [pc, #76]	@ (8000264 <GPIO_Init+0x58>)
 8000216:	f043 0301 	orr.w	r3, r3, #1
 800021a:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA0 as general-purpose output mode
    GPIOA->MODER &= ~GPIO_MODER_MODE0;  // Clear the current mode
 800021c:	4b12      	ldr	r3, [pc, #72]	@ (8000268 <GPIO_Init+0x5c>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a11      	ldr	r2, [pc, #68]	@ (8000268 <GPIO_Init+0x5c>)
 8000222:	f023 0303 	bic.w	r3, r3, #3
 8000226:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODE0_0; // Set to output mode (binary 01)
 8000228:	4b0f      	ldr	r3, [pc, #60]	@ (8000268 <GPIO_Init+0x5c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a0e      	ldr	r2, [pc, #56]	@ (8000268 <GPIO_Init+0x5c>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6013      	str	r3, [r2, #0]

    // Set PA0 output type to push-pull
    GPIOA->OTYPER &= ~GPIO_OTYPER_OT0; // Clear output type (push-pull is default)
 8000234:	4b0c      	ldr	r3, [pc, #48]	@ (8000268 <GPIO_Init+0x5c>)
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	4a0b      	ldr	r2, [pc, #44]	@ (8000268 <GPIO_Init+0x5c>)
 800023a:	f023 0301 	bic.w	r3, r3, #1
 800023e:	6053      	str	r3, [r2, #4]

    // Set PA0 to low speed (optional for LEDs)
    GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED0;
 8000240:	4b09      	ldr	r3, [pc, #36]	@ (8000268 <GPIO_Init+0x5c>)
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	4a08      	ldr	r2, [pc, #32]	@ (8000268 <GPIO_Init+0x5c>)
 8000246:	f023 0303 	bic.w	r3, r3, #3
 800024a:	6093      	str	r3, [r2, #8]

    // No pull-up or pull-down resistors
    GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD0; // Clear pull-up/pull-down settings
 800024c:	4b06      	ldr	r3, [pc, #24]	@ (8000268 <GPIO_Init+0x5c>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	4a05      	ldr	r2, [pc, #20]	@ (8000268 <GPIO_Init+0x5c>)
 8000252:	f023 0303 	bic.w	r3, r3, #3
 8000256:	60d3      	str	r3, [r2, #12]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40023800 	.word	0x40023800
 8000268:	40020000 	.word	0x40020000

0800026c <SystemClock_Config>:
//    // Wait until HSI is used as the system clock
//    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
//}

void SystemClock_Config(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
    // Enable High-Speed External (HSE) oscillator
    RCC->CR |= RCC_CR_HSEON;          // Turn on HSE
 8000270:	4b12      	ldr	r3, [pc, #72]	@ (80002bc <SystemClock_Config+0x50>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a11      	ldr	r2, [pc, #68]	@ (80002bc <SystemClock_Config+0x50>)
 8000276:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800027a:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY)); // Wait until HSE is ready
 800027c:	bf00      	nop
 800027e:	4b0f      	ldr	r3, [pc, #60]	@ (80002bc <SystemClock_Config+0x50>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000286:	2b00      	cmp	r3, #0
 8000288:	d0f9      	beq.n	800027e <SystemClock_Config+0x12>

    // Set HSE as the system clock source
    RCC->CFGR &= ~RCC_CFGR_SW;        // Clear system clock switch bits
 800028a:	4b0c      	ldr	r3, [pc, #48]	@ (80002bc <SystemClock_Config+0x50>)
 800028c:	689b      	ldr	r3, [r3, #8]
 800028e:	4a0b      	ldr	r2, [pc, #44]	@ (80002bc <SystemClock_Config+0x50>)
 8000290:	f023 0303 	bic.w	r3, r3, #3
 8000294:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_HSE;     // Set HSE as the clock source
 8000296:	4b09      	ldr	r3, [pc, #36]	@ (80002bc <SystemClock_Config+0x50>)
 8000298:	689b      	ldr	r3, [r3, #8]
 800029a:	4a08      	ldr	r2, [pc, #32]	@ (80002bc <SystemClock_Config+0x50>)
 800029c:	f043 0301 	orr.w	r3, r3, #1
 80002a0:	6093      	str	r3, [r2, #8]

    // Wait until HSE is used as the system clock
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE);
 80002a2:	bf00      	nop
 80002a4:	4b05      	ldr	r3, [pc, #20]	@ (80002bc <SystemClock_Config+0x50>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	f003 030c 	and.w	r3, r3, #12
 80002ac:	2b04      	cmp	r3, #4
 80002ae:	d1f9      	bne.n	80002a4 <SystemClock_Config+0x38>
}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	40023800 	.word	0x40023800

080002c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002c4:	bf00      	nop
 80002c6:	e7fd      	b.n	80002c4 <NMI_Handler+0x4>

080002c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002cc:	bf00      	nop
 80002ce:	e7fd      	b.n	80002cc <HardFault_Handler+0x4>

080002d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002d4:	bf00      	nop
 80002d6:	e7fd      	b.n	80002d4 <MemManage_Handler+0x4>

080002d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002dc:	bf00      	nop
 80002de:	e7fd      	b.n	80002dc <BusFault_Handler+0x4>

080002e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002e4:	bf00      	nop
 80002e6:	e7fd      	b.n	80002e4 <UsageFault_Handler+0x4>

080002e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr

080002f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002f6:	b480      	push	{r7}
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002fa:	bf00      	nop
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr

08000312 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000312:	b580      	push	{r7, lr}
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000316:	f000 f83f 	bl	8000398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000324:	4b06      	ldr	r3, [pc, #24]	@ (8000340 <SystemInit+0x20>)
 8000326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800032a:	4a05      	ldr	r2, [pc, #20]	@ (8000340 <SystemInit+0x20>)
 800032c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000330:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000344:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800037c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000348:	f7ff ffea 	bl	8000320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800034c:	480c      	ldr	r0, [pc, #48]	@ (8000380 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800034e:	490d      	ldr	r1, [pc, #52]	@ (8000384 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000350:	4a0d      	ldr	r2, [pc, #52]	@ (8000388 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000354:	e002      	b.n	800035c <LoopCopyDataInit>

08000356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035a:	3304      	adds	r3, #4

0800035c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800035c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000360:	d3f9      	bcc.n	8000356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000362:	4a0a      	ldr	r2, [pc, #40]	@ (800038c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000364:	4c0a      	ldr	r4, [pc, #40]	@ (8000390 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000368:	e001      	b.n	800036e <LoopFillZerobss>

0800036a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800036c:	3204      	adds	r2, #4

0800036e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000370:	d3fb      	bcc.n	800036a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000372:	f000 f825 	bl	80003c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000376:	f7ff ff2d 	bl	80001d4 <main>
  bx  lr    
 800037a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800037c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000384:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000388:	08000428 	.word	0x08000428
  ldr r2, =_sbss
 800038c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000390:	20000024 	.word	0x20000024

08000394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000394:	e7fe      	b.n	8000394 <ADC_IRQHandler>
	...

08000398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800039c:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <HAL_IncTick+0x20>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	461a      	mov	r2, r3
 80003a2:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <HAL_IncTick+0x24>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4413      	add	r3, r2
 80003a8:	4a04      	ldr	r2, [pc, #16]	@ (80003bc <HAL_IncTick+0x24>)
 80003aa:	6013      	str	r3, [r2, #0]
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	20000000 	.word	0x20000000
 80003bc:	20000020 	.word	0x20000020

080003c0 <__libc_init_array>:
 80003c0:	b570      	push	{r4, r5, r6, lr}
 80003c2:	4d0d      	ldr	r5, [pc, #52]	@ (80003f8 <__libc_init_array+0x38>)
 80003c4:	4c0d      	ldr	r4, [pc, #52]	@ (80003fc <__libc_init_array+0x3c>)
 80003c6:	1b64      	subs	r4, r4, r5
 80003c8:	10a4      	asrs	r4, r4, #2
 80003ca:	2600      	movs	r6, #0
 80003cc:	42a6      	cmp	r6, r4
 80003ce:	d109      	bne.n	80003e4 <__libc_init_array+0x24>
 80003d0:	4d0b      	ldr	r5, [pc, #44]	@ (8000400 <__libc_init_array+0x40>)
 80003d2:	4c0c      	ldr	r4, [pc, #48]	@ (8000404 <__libc_init_array+0x44>)
 80003d4:	f000 f818 	bl	8000408 <_init>
 80003d8:	1b64      	subs	r4, r4, r5
 80003da:	10a4      	asrs	r4, r4, #2
 80003dc:	2600      	movs	r6, #0
 80003de:	42a6      	cmp	r6, r4
 80003e0:	d105      	bne.n	80003ee <__libc_init_array+0x2e>
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e8:	4798      	blx	r3
 80003ea:	3601      	adds	r6, #1
 80003ec:	e7ee      	b.n	80003cc <__libc_init_array+0xc>
 80003ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f2:	4798      	blx	r3
 80003f4:	3601      	adds	r6, #1
 80003f6:	e7f2      	b.n	80003de <__libc_init_array+0x1e>
 80003f8:	08000420 	.word	0x08000420
 80003fc:	08000420 	.word	0x08000420
 8000400:	08000420 	.word	0x08000420
 8000404:	08000424 	.word	0x08000424

08000408 <_init>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr

08000414 <_fini>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr
